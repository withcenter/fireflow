rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    match /ff_user_push_notifications/{document} {
      allow create: if /databases/$(database)/documents/users/$(request.auth.uid) == request.resource.data.sender;
      allow read: if false;
      allow write: if false;
      allow delete: if false;
    }
    

    match /chat_rooms/{document} {
      allow get: if isMyChatRoom() || isOpenChat();
      allow list: if isMyChatRoom() || isOpenChat();
      allow create: if true;
      allow update: if
        // moderator can update anything
        (
          'moderatorUserDocumentReferences' in resource.data
          &&
          myReference() in resource.data.moderatorUserDocumentReferences
        )
        ||
        // chat member update last message fields.
        (
          isMyChatRoom()
          &&
          onlyUpdating(["lastMessage", "lastMessageSentAt", "lastMessageSeenBy", "lastMessageSentBy"])
        )
        // chat member can remove himself or add other users.
        ||
        (
          isMyChatRoom()
          &&
          onlyUpdating(["userDocumentReferences"])
          &&
          request.resource.data.userDocumentReferences.hasAll(resource.data.userDocumentReferences.removeAll([myReference()]))
        )
        ||
        // subscribe, unsubscribe
        (
          isMyChatRoom()
          &&
          onlyUpdating(["unsubscribedUserDocumentReferences"])
          &&
          request.resource.data.unsubscribedUserDocumentReferences.removeAll([myReference()]).hasOnly(resource.data.unsubscribedUserDocumentReferences.removeAll([myReference()])) 
          &&
          request.resource.data.unsubscribedUserDocumentReferences.removeAll([myReference()]).size() == resource.data.unsubscribedUserDocumentReferences.removeAll([myReference()]).size()
        )
        ||
        // if it's open group chat, he can enter without invitation.
        isOpenChat() && request.resource.data.userDocumentReferences.hasAll(resource.data.userDocumentReferences.concat([myReference()]))
        ;
      allow delete: if false;
    }

    match /chat_room_messages/{document} {
      allow read: if get(resource.data.chatRoomDocumentReference).data.userDocumentReferences.hasAny([myReference()]);
      allow create: if get(request.resource.data.chatRoomDocumentReference).data.userDocumentReferences.hasAny([myReference()]) && willBeMyDoc();
      allow update, delete: if isMyDoc();
    }

    match /users/{document} {
      allow create: if request.auth.uid == document;
      allow read: if request.auth.uid == document || isAdmin();
      allow update: if request.auth.uid == document ;
      allow delete: if false;
    }
    
    match /users_public_data/{document} {
      allow create: if request.auth.uid == document;
      allow read: if true;
      allow update: if isMyDoc()
      ||
        onlyUpdating(['likes']);
      allow delete: if false;
    }
  
    match /settings/{document} {
      allow read: if true;
      allow write: if isMyDoc() || willBeMyDoc();
    }
    match /system_settings/{document} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    // check if the user is admin.
    function isAdmin() {
      return get(/databases/$(database)/documents/system_settings/admins).data[request.auth.uid] == true;
    }

    function isMyChatRoom() {
      return resource.data.userDocumentReferences.hasAny([myReference()]);
    }
    function isMyDoc() {
      return resource.data.userDocumentReference == myReference();
    }
    
    function willBeMyDoc() {
      return request.resource.data.userDocumentReference == myReference();
    }
    
    function myReference() {
      return /databases/$(database)/documents/users/$(request.auth.uid);
    }
  }
}

function onlyUpdating(fields) {
  return request.resource.data.diff(resource.data).affectedKeys().hasOnly(fields);
}

function isOpenChat() {
  return 'isOpenChat' in  resource.data && resource.data.isOpenChat == true;
}


